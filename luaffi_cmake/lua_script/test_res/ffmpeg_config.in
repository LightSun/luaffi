#define FF_API_OLD_OPEN_CALLBACKS 1
#define FF_API_FORMAT_FILENAME 1
#define FF_API_LAVF_AVCTX 1
#define FF_API_LAVF_FFSERVER 1
#define FF_API_PRIVATE_OPT 1
#define FF_API_OLD_ENCDEC 1
#define FF_API_CODER_TYPE 1
#define FF_API_RTP_CALLBACK 1
#define FF_API_STAT_BITS 1
#define FF_API_CODED_FRAME 1
#define FF_API_THREAD_SAFE_CALLBACKS 1
#define FF_API_VBV_DELAY 1
#define FF_API_SIDEDATA_ONLY_PKT 1
#define FF_API_DEBUG_MV 1
#define FF_API_ASS_TIMING 1
#define FF_API_PKT_PTS 1
#define FF_API_ERROR_FRAME 1
#define FF_API_FRAME_QP 1
#define FF_API_NEXT 1
#define FF_API_CONVERGENCE_DURATION 1
#define FF_API_BUFFER_SIZE_T 1

#define av_format_control_message pointer
#define AV_NUM_DATA_POINTERS 8

#define LIBAVFORMAT_VERSION_MAJOR 1

//self define. by heaven7. indicate alloc data and free self.
#define HAS_DATA_AVIOInterruptCB 1
#define FREE_DATA_AVIOInterruptCB 1
#define HAS_DATA_AVRational 1
#define FREE_DATA_AVRational 1
#define HAS_DATA_AVProbeData 1
#define FREE_DATA_AVProbeData 1
#define HAS_DATA_AVProfile 1
#define FREE_DATA_AVProfile 1
#define HAS_DATA_AVBufferRef 1
#define FREE_DATA_AVBufferRef 1

typedef struct AVIOInterruptCB {
    int (*callback)(void*);
    void *opaque;
} AVIOInterruptCB;

typedef struct AVRational{
    int num; ///< Numerator
    int den; ///< Denominator
} AVRational;

typedef struct AVProbeData {
    const char *filename;
    unsigned char *buf; /**< Buffer must have AVPROBE_PADDING_SIZE of extra allocated bytes filled with zero. */
    int buf_size;       /**< Size of buf except extra allocated bytes */
    const char *mime_type; /**< mime_type, when known. */
} AVProbeData;

/**
 * AVProfile.
 */
typedef struct AVProfile {
    int profile;
    const char *name; ///< short name for the profile
} AVProfile;

typedef struct AVBufferRef {
    AVBuffer *buffer;

    /**
     * The data buffer. It is considered writable if and only if
     * this is the only reference to the buffer, in which case
     * av_buffer_is_writable() returns 1.
     */
    uint8_t *data;
    /**
     * Size of data in bytes.
     */
#if FF_API_BUFFER_SIZE_T
    int      size;
#else
    size_t   size;
#endif
} AVBufferRef;